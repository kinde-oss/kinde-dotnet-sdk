// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateUserIdentityRequest
    /// </summary>
    public partial class CreateUserIdentityRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserIdentityRequest" /> class.
        /// </summary>
        /// <param name="value">The email address, social identity, or username of the user.</param>
        /// <param name="type">The identity type</param>
        /// <param name="phoneCountryId">The country code for the phone number, only required when identity type is &#39;phone&#39;.</param>
        /// <param name="connectionId">The social or enterprise connection ID, only required when identity type is &#39;social&#39; or &#39;enterprise&#39;.</param>
        [JsonConstructor]
        public CreateUserIdentityRequest(Option<string?> value = default, Option<TypeEnum?> type = default, Option<string?> phoneCountryId = default, Option<string?> connectionId = default)
        {
            ValueOption = value;
            TypeOption = type;
            PhoneCountryIdOption = phoneCountryId;
            ConnectionIdOption = connectionId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The identity type
        /// </summary>
        /// <value>The identity type</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            Email = 1,

            /// <summary>
            /// Enum Username for value: username
            /// </summary>
            Username = 2,

            /// <summary>
            /// Enum Phone for value: phone
            /// </summary>
            Phone = 3,

            /// <summary>
            /// Enum Enterprise for value: enterprise
            /// </summary>
            Enterprise = 4,

            /// <summary>
            /// Enum Social for value: social
            /// </summary>
            Social = 5
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("email"))
                return TypeEnum.Email;

            if (value.Equals("username"))
                return TypeEnum.Username;

            if (value.Equals("phone"))
                return TypeEnum.Phone;

            if (value.Equals("enterprise"))
                return TypeEnum.Enterprise;

            if (value.Equals("social"))
                return TypeEnum.Social;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("email"))
                return TypeEnum.Email;

            if (value.Equals("username"))
                return TypeEnum.Username;

            if (value.Equals("phone"))
                return TypeEnum.Phone;

            if (value.Equals("enterprise"))
                return TypeEnum.Enterprise;

            if (value.Equals("social"))
                return TypeEnum.Social;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Email)
                return "email";

            if (value == TypeEnum.Username)
                return "username";

            if (value == TypeEnum.Phone)
                return "phone";

            if (value == TypeEnum.Enterprise)
                return "enterprise";

            if (value == TypeEnum.Social)
                return "social";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// The identity type
        /// </summary>
        /// <value>The identity type</value>
        /* <example>email</example> */
        [JsonConverter(typeof(Kinde.Api.Converters.GenericEnumConverter))]
        [Newtonsoft.Json.JsonConverter(typeof(Kinde.Api.Converters.NewtonsoftGenericEnumConverter))]
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// The email address, social identity, or username of the user.
        /// </summary>
        /// <value>The email address, social identity, or username of the user.</value>
        /* <example>sally@example.com</example> */
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PhoneCountryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneCountryIdOption { get; private set; }

        /// <summary>
        /// The country code for the phone number, only required when identity type is &#39;phone&#39;.
        /// </summary>
        /// <value>The country code for the phone number, only required when identity type is &#39;phone&#39;.</value>
        /* <example>au</example> */
        [JsonPropertyName("phone_country_id")]
        public string? PhoneCountryId { get { return this.PhoneCountryIdOption; } set { this.PhoneCountryIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ConnectionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConnectionIdOption { get; private set; }

        /// <summary>
        /// The social or enterprise connection ID, only required when identity type is &#39;social&#39; or &#39;enterprise&#39;.
        /// </summary>
        /// <value>The social or enterprise connection ID, only required when identity type is &#39;social&#39; or &#39;enterprise&#39;.</value>
        /* <example>conn_019289347f1193da6c0e4d49b97b4bd2</example> */
        [JsonPropertyName("connection_id")]
        public string? ConnectionId { get { return this.ConnectionIdOption; } set { this.ConnectionIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserIdentityRequest {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PhoneCountryId: ").Append(PhoneCountryId).Append("\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateUserIdentityRequest" />
    /// </summary>
    public class CreateUserIdentityRequestJsonConverter : JsonConverter<CreateUserIdentityRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateUserIdentityRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateUserIdentityRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> value = default;
            Option<CreateUserIdentityRequest.TypeEnum?> type = default;
            Option<string?> phoneCountryId = default;
            Option<string?> connectionId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CreateUserIdentityRequest.TypeEnum?>(CreateUserIdentityRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "phone_country_id":
                            phoneCountryId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "connection_id":
                            connectionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class CreateUserIdentityRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreateUserIdentityRequest.");

            if (phoneCountryId.IsSet && phoneCountryId.Value == null)
                throw new ArgumentNullException(nameof(phoneCountryId), "Property is not nullable for class CreateUserIdentityRequest.");

            if (connectionId.IsSet && connectionId.Value == null)
                throw new ArgumentNullException(nameof(connectionId), "Property is not nullable for class CreateUserIdentityRequest.");

            return new CreateUserIdentityRequest(value, type, phoneCountryId, connectionId);
        }

        /// <summary>
        /// Serializes a <see cref="CreateUserIdentityRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createUserIdentityRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateUserIdentityRequest createUserIdentityRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createUserIdentityRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateUserIdentityRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createUserIdentityRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateUserIdentityRequest createUserIdentityRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createUserIdentityRequest.ValueOption.IsSet && createUserIdentityRequest.Value == null)
                throw new ArgumentNullException(nameof(createUserIdentityRequest.Value), "Property is required for class CreateUserIdentityRequest.");

            if (createUserIdentityRequest.PhoneCountryIdOption.IsSet && createUserIdentityRequest.PhoneCountryId == null)
                throw new ArgumentNullException(nameof(createUserIdentityRequest.PhoneCountryId), "Property is required for class CreateUserIdentityRequest.");

            if (createUserIdentityRequest.ConnectionIdOption.IsSet && createUserIdentityRequest.ConnectionId == null)
                throw new ArgumentNullException(nameof(createUserIdentityRequest.ConnectionId), "Property is required for class CreateUserIdentityRequest.");

            if (createUserIdentityRequest.ValueOption.IsSet)
                writer.WriteString("value", createUserIdentityRequest.Value);

            var typeRawValue = CreateUserIdentityRequest.TypeEnumToJsonValue(createUserIdentityRequest.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (createUserIdentityRequest.PhoneCountryIdOption.IsSet)
                writer.WriteString("phone_country_id", createUserIdentityRequest.PhoneCountryId);

            if (createUserIdentityRequest.ConnectionIdOption.IsSet)
                writer.WriteString("connection_id", createUserIdentityRequest.ConnectionId);
        }
    }
}
