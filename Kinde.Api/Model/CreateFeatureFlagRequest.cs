// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateFeatureFlagRequest
    /// </summary>
    public partial class CreateFeatureFlagRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeatureFlagRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the flag.</param>
        /// <param name="key">The flag identifier to use in code.</param>
        /// <param name="type">The variable type.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        [JsonConstructor]
        public CreateFeatureFlagRequest(string name, string key, TypeEnum type, string defaultValue, Option<string?> description = default, Option<AllowOverrideLevelEnum?> allowOverrideLevel = default)
        {
            Name = name;
            Key = key;
            Type = type;
            DefaultValue = defaultValue;
            DescriptionOption = description;
            AllowOverrideLevelOption = allowOverrideLevel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The variable type.
        /// </summary>
        /// <value>The variable type.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Str for value: str
            /// </summary>
            Str = 1,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            Int = 2,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            Bool = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("str"))
                return TypeEnum.Str;

            if (value.Equals("int"))
                return TypeEnum.Int;

            if (value.Equals("bool"))
                return TypeEnum.Bool;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("str"))
                return TypeEnum.Str;

            if (value.Equals("int"))
                return TypeEnum.Int;

            if (value.Equals("bool"))
                return TypeEnum.Bool;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Str)
                return "str";

            if (value == TypeEnum.Int)
                return "int";

            if (value == TypeEnum.Bool)
                return "bool";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The variable type.
        /// </summary>
        /// <value>The variable type.</value>
        [JsonConverter(typeof(Kinde.Api.Converters.GenericEnumConverter))]

        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Allow the flag to be overridden at a different level.
        /// </summary>
        /// <value>Allow the flag to be overridden at a different level.</value>
        public enum AllowOverrideLevelEnum
        {
            /// <summary>
            /// Enum Env for value: env
            /// </summary>
            Env = 1,

            /// <summary>
            /// Enum Org for value: org
            /// </summary>
            Org = 2,

            /// <summary>
            /// Enum Usr for value: usr
            /// </summary>
            Usr = 3
        }

        /// <summary>
        /// Returns a <see cref="AllowOverrideLevelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AllowOverrideLevelEnum AllowOverrideLevelEnumFromString(string value)
        {
            if (value.Equals("env"))
                return AllowOverrideLevelEnum.Env;

            if (value.Equals("org"))
                return AllowOverrideLevelEnum.Org;

            if (value.Equals("usr"))
                return AllowOverrideLevelEnum.Usr;

            throw new NotImplementedException($"Could not convert value to type AllowOverrideLevelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AllowOverrideLevelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AllowOverrideLevelEnum? AllowOverrideLevelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("env"))
                return AllowOverrideLevelEnum.Env;

            if (value.Equals("org"))
                return AllowOverrideLevelEnum.Org;

            if (value.Equals("usr"))
                return AllowOverrideLevelEnum.Usr;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AllowOverrideLevelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AllowOverrideLevelEnumToJsonValue(AllowOverrideLevelEnum? value)
        {
            if (value == AllowOverrideLevelEnum.Env)
                return "env";

            if (value == AllowOverrideLevelEnum.Org)
                return "org";

            if (value == AllowOverrideLevelEnum.Usr)
                return "usr";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AllowOverrideLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AllowOverrideLevelEnum?> AllowOverrideLevelOption { get; private set; }

        /// <summary>
        /// Allow the flag to be overridden at a different level.
        /// </summary>
        /// <value>Allow the flag to be overridden at a different level.</value>
        [JsonPropertyName("allow_override_level")]
        public AllowOverrideLevelEnum? AllowOverrideLevel { get { return this.AllowOverrideLevelOption; } set { this.AllowOverrideLevelOption = new Option<AllowOverrideLevelEnum?>(value); } }

        /// <summary>
        /// The name of the flag.
        /// </summary>
        /// <value>The name of the flag.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The flag identifier to use in code.
        /// </summary>
        /// <value>The flag identifier to use in code.</value>
        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Default value for the flag used by environments and organizations.
        /// </summary>
        /// <value>Default value for the flag used by environments and organizations.</value>
        [JsonPropertyName("default_value")]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the flag purpose.
        /// </summary>
        /// <value>Description of the flag purpose.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFeatureFlagRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AllowOverrideLevel: ").Append(AllowOverrideLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateFeatureFlagRequest" />
    /// </summary>
    public class CreateFeatureFlagRequestJsonConverter : JsonConverter<CreateFeatureFlagRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateFeatureFlagRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateFeatureFlagRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> key = default;
            Option<CreateFeatureFlagRequest.TypeEnum?> type = default;
            Option<string?> defaultValue = default;
            Option<string?> description = default;
            Option<CreateFeatureFlagRequest.AllowOverrideLevelEnum?> allowOverrideLevel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CreateFeatureFlagRequest.TypeEnum?>(CreateFeatureFlagRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "default_value":
                            defaultValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "allow_override_level":
                            string? allowOverrideLevelRawValue = utf8JsonReader.GetString();
                            if (allowOverrideLevelRawValue != null)
                                allowOverrideLevel = new Option<CreateFeatureFlagRequest.AllowOverrideLevelEnum?>(CreateFeatureFlagRequest.AllowOverrideLevelEnumFromStringOrDefault(allowOverrideLevelRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateFeatureFlagRequest.", nameof(name));

            if (!key.IsSet)
                throw new ArgumentException("Property is required for class CreateFeatureFlagRequest.", nameof(key));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CreateFeatureFlagRequest.", nameof(type));

            if (!defaultValue.IsSet)
                throw new ArgumentException("Property is required for class CreateFeatureFlagRequest.", nameof(defaultValue));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateFeatureFlagRequest.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class CreateFeatureFlagRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreateFeatureFlagRequest.");

            if (defaultValue.IsSet && defaultValue.Value == null)
                throw new ArgumentNullException(nameof(defaultValue), "Property is not nullable for class CreateFeatureFlagRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class CreateFeatureFlagRequest.");

            if (allowOverrideLevel.IsSet && allowOverrideLevel.Value == null)
                throw new ArgumentNullException(nameof(allowOverrideLevel), "Property is not nullable for class CreateFeatureFlagRequest.");

            return new CreateFeatureFlagRequest(name.Value!, key.Value!, type.Value!.Value!, defaultValue.Value!, description, allowOverrideLevel);
        }

        /// <summary>
        /// Serializes a <see cref="CreateFeatureFlagRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createFeatureFlagRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateFeatureFlagRequest createFeatureFlagRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createFeatureFlagRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateFeatureFlagRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createFeatureFlagRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateFeatureFlagRequest createFeatureFlagRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createFeatureFlagRequest.Name == null)
                throw new ArgumentNullException(nameof(createFeatureFlagRequest.Name), "Property is required for class CreateFeatureFlagRequest.");

            if (createFeatureFlagRequest.Key == null)
                throw new ArgumentNullException(nameof(createFeatureFlagRequest.Key), "Property is required for class CreateFeatureFlagRequest.");

            if (createFeatureFlagRequest.DefaultValue == null)
                throw new ArgumentNullException(nameof(createFeatureFlagRequest.DefaultValue), "Property is required for class CreateFeatureFlagRequest.");

            if (createFeatureFlagRequest.DescriptionOption.IsSet && createFeatureFlagRequest.Description == null)
                throw new ArgumentNullException(nameof(createFeatureFlagRequest.Description), "Property is required for class CreateFeatureFlagRequest.");

            writer.WriteString("name", createFeatureFlagRequest.Name);

            writer.WriteString("key", createFeatureFlagRequest.Key);

            var typeRawValue = CreateFeatureFlagRequest.TypeEnumToJsonValue(createFeatureFlagRequest.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("default_value", createFeatureFlagRequest.DefaultValue);

            if (createFeatureFlagRequest.DescriptionOption.IsSet)
                writer.WriteString("description", createFeatureFlagRequest.Description);

            var allowOverrideLevelRawValue = CreateFeatureFlagRequest.AllowOverrideLevelEnumToJsonValue(createFeatureFlagRequest.AllowOverrideLevelOption.Value!.Value);
            writer.WriteString("allow_override_level", allowOverrideLevelRawValue);
        }
    }
}
