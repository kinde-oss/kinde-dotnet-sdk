// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetApiResponseApiApplicationsInner
    /// </summary>
    public partial class GetApiResponseApiApplicationsInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetApiResponseApiApplicationsInner" /> class.
        /// </summary>
        /// <param name="id">The Client ID of the application.</param>
        /// <param name="name">The application&#39;s name.</param>
        /// <param name="type">The application&#39;s type.</param>
        /// <param name="isActive">Whether or not the application is authorized to access the API</param>
        [JsonConstructor]
        public GetApiResponseApiApplicationsInner(Option<string?> id = default, Option<string?> name = default, Option<TypeEnum?> type = default, Option<bool?> isActive = default)
        {
            IdOption = id;
            NameOption = name;
            TypeOption = type;
            IsActiveOption = isActive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The application&#39;s type.
        /// </summary>
        /// <value>The application&#39;s type.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MachineToMachineM2M for value: Machine to machine (M2M)
            /// </summary>
            MachineToMachineM2M = 1,

            /// <summary>
            /// Enum BackEndWeb for value: Back-end web
            /// </summary>
            BackEndWeb = 2,

            /// <summary>
            /// Enum FrontEndAndMobile for value: Front-end and mobile
            /// </summary>
            FrontEndAndMobile = 3,

            /// <summary>
            /// Enum DeviceAndIoT for value: Device and IoT
            /// </summary>
            DeviceAndIoT = 4
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("Machine to machine (M2M)"))
                return TypeEnum.MachineToMachineM2M;

            if (value.Equals("Back-end web"))
                return TypeEnum.BackEndWeb;

            if (value.Equals("Front-end and mobile"))
                return TypeEnum.FrontEndAndMobile;

            if (value.Equals("Device and IoT"))
                return TypeEnum.DeviceAndIoT;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Machine to machine (M2M)"))
                return TypeEnum.MachineToMachineM2M;

            if (value.Equals("Back-end web"))
                return TypeEnum.BackEndWeb;

            if (value.Equals("Front-end and mobile"))
                return TypeEnum.FrontEndAndMobile;

            if (value.Equals("Device and IoT"))
                return TypeEnum.DeviceAndIoT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.MachineToMachineM2M)
                return "Machine to machine (M2M)";

            if (value == TypeEnum.BackEndWeb)
                return "Back-end web";

            if (value == TypeEnum.FrontEndAndMobile)
                return "Front-end and mobile";

            if (value == TypeEnum.DeviceAndIoT)
                return "Device and IoT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// The application&#39;s type.
        /// </summary>
        /// <value>The application&#39;s type.</value>
        /* <example>Machine to machine (M2M)</example> */
        [JsonConverter(typeof(Kinde.Api.Converters.GenericEnumConverter))]

        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The Client ID of the application.
        /// </summary>
        /// <value>The Client ID of the application.</value>
        /* <example>3b0b5c6c8fcc464fab397f4969b5f482</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The application&#39;s name.
        /// </summary>
        /// <value>The application&#39;s name.</value>
        /* <example>My M2M app</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Whether or not the application is authorized to access the API
        /// </summary>
        /// <value>Whether or not the application is authorized to access the API</value>
        /* <example>true</example> */
        [JsonPropertyName("is_active")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetApiResponseApiApplicationsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetApiResponseApiApplicationsInner" />
    /// </summary>
    public class GetApiResponseApiApplicationsInnerJsonConverter : JsonConverter<GetApiResponseApiApplicationsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetApiResponseApiApplicationsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetApiResponseApiApplicationsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<GetApiResponseApiApplicationsInner.TypeEnum?> type = default;
            Option<bool?> isActive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GetApiResponseApiApplicationsInner.TypeEnum?>(GetApiResponseApiApplicationsInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "is_active":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetApiResponseApiApplicationsInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetApiResponseApiApplicationsInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetApiResponseApiApplicationsInner.");

            return new GetApiResponseApiApplicationsInner(id, name, type, isActive);
        }

        /// <summary>
        /// Serializes a <see cref="GetApiResponseApiApplicationsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getApiResponseApiApplicationsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetApiResponseApiApplicationsInner getApiResponseApiApplicationsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getApiResponseApiApplicationsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetApiResponseApiApplicationsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getApiResponseApiApplicationsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetApiResponseApiApplicationsInner getApiResponseApiApplicationsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getApiResponseApiApplicationsInner.IdOption.IsSet && getApiResponseApiApplicationsInner.Id == null)
                throw new ArgumentNullException(nameof(getApiResponseApiApplicationsInner.Id), "Property is required for class GetApiResponseApiApplicationsInner.");

            if (getApiResponseApiApplicationsInner.NameOption.IsSet && getApiResponseApiApplicationsInner.Name == null)
                throw new ArgumentNullException(nameof(getApiResponseApiApplicationsInner.Name), "Property is required for class GetApiResponseApiApplicationsInner.");

            if (getApiResponseApiApplicationsInner.IdOption.IsSet)
                writer.WriteString("id", getApiResponseApiApplicationsInner.Id);

            if (getApiResponseApiApplicationsInner.NameOption.IsSet)
                writer.WriteString("name", getApiResponseApiApplicationsInner.Name);

            var typeRawValue = GetApiResponseApiApplicationsInner.TypeEnumToJsonValue(getApiResponseApiApplicationsInner.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (getApiResponseApiApplicationsInner.IsActiveOption.IsSet)
                if (getApiResponseApiApplicationsInner.IsActiveOption.Value != null)
                    writer.WriteBoolean("is_active", getApiResponseApiApplicationsInner.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("is_active");
        }
    }
}
