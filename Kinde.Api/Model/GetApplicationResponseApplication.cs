// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetApplicationResponseApplication
    /// </summary>
    public partial class GetApplicationResponseApplication
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetApplicationResponseApplication" /> class.
        /// </summary>
        /// <param name="id">The application&#39;s identifier.</param>
        /// <param name="name">The application&#39;s name.</param>
        /// <param name="type">The application&#39;s type.</param>
        /// <param name="clientId">The application&#39;s client ID.</param>
        /// <param name="clientSecret">The application&#39;s client secret.</param>
        /// <param name="loginUri">The default login route for resolving session issues.</param>
        /// <param name="homepageUri">The homepage link to your application.</param>
        /// <param name="hasCancelButton">Whether the application has a cancel button to allow users to exit the auth flow [Beta].</param>
        [JsonConstructor]
        public GetApplicationResponseApplication(Option<string?> id = default, Option<string?> name = default, Option<TypeEnum?> type = default, Option<string?> clientId = default, Option<string?> clientSecret = default, Option<string?> loginUri = default, Option<string?> homepageUri = default, Option<bool?> hasCancelButton = default)
        {
            IdOption = id;
            NameOption = name;
            TypeOption = type;
            ClientIdOption = clientId;
            ClientSecretOption = clientSecret;
            LoginUriOption = loginUri;
            HomepageUriOption = homepageUri;
            HasCancelButtonOption = hasCancelButton;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The application&#39;s type.
        /// </summary>
        /// <value>The application&#39;s type.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum M2m for value: m2m
            /// </summary>
            M2m = 1,

            /// <summary>
            /// Enum Reg for value: reg
            /// </summary>
            Reg = 2,

            /// <summary>
            /// Enum Spa for value: spa
            /// </summary>
            Spa = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("m2m"))
                return TypeEnum.M2m;

            if (value.Equals("reg"))
                return TypeEnum.Reg;

            if (value.Equals("spa"))
                return TypeEnum.Spa;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("m2m"))
                return TypeEnum.M2m;

            if (value.Equals("reg"))
                return TypeEnum.Reg;

            if (value.Equals("spa"))
                return TypeEnum.Spa;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.M2m)
                return "m2m";

            if (value == TypeEnum.Reg)
                return "reg";

            if (value == TypeEnum.Spa)
                return "spa";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// The application&#39;s type.
        /// </summary>
        /// <value>The application&#39;s type.</value>
        [JsonConverter(typeof(Kinde.Api.Converters.GenericEnumConverter))]

        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The application&#39;s identifier.
        /// </summary>
        /// <value>The application&#39;s identifier.</value>
        /* <example>3b0b5c6c8fcc464fab397f4969b5f482</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The application&#39;s name.
        /// </summary>
        /// <value>The application&#39;s name.</value>
        /* <example>My React app</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ClientId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientIdOption { get; private set; }

        /// <summary>
        /// The application&#39;s client ID.
        /// </summary>
        /// <value>The application&#39;s client ID.</value>
        /* <example>3b0b5c6c8fcc464fab397f4969b5f482</example> */
        [JsonPropertyName("client_id")]
        public string? ClientId { get { return this.ClientIdOption; } set { this.ClientIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ClientSecret
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientSecretOption { get; private set; }

        /// <summary>
        /// The application&#39;s client secret.
        /// </summary>
        /// <value>The application&#39;s client secret.</value>
        /* <example>sUJSHI3ZQEVTJkx6hOxdOSHaLsZkCBRFLzTNOI791rX8mDjgt7LC</example> */
        [JsonPropertyName("client_secret")]
        public string? ClientSecret { get { return this.ClientSecretOption; } set { this.ClientSecretOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LoginUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginUriOption { get; private set; }

        /// <summary>
        /// The default login route for resolving session issues.
        /// </summary>
        /// <value>The default login route for resolving session issues.</value>
        /* <example>https://yourapp.com/api/auth/login</example> */
        [JsonPropertyName("login_uri")]
        public string? LoginUri { get { return this.LoginUriOption; } set { this.LoginUriOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of HomepageUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HomepageUriOption { get; private set; }

        /// <summary>
        /// The homepage link to your application.
        /// </summary>
        /// <value>The homepage link to your application.</value>
        /* <example>https://yourapp.com</example> */
        [JsonPropertyName("homepage_uri")]
        public string? HomepageUri { get { return this.HomepageUriOption; } set { this.HomepageUriOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of HasCancelButton
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasCancelButtonOption { get; private set; }

        /// <summary>
        /// Whether the application has a cancel button to allow users to exit the auth flow [Beta].
        /// </summary>
        /// <value>Whether the application has a cancel button to allow users to exit the auth flow [Beta].</value>
        /* <example>false</example> */
        [JsonPropertyName("has_cancel_button")]
        public bool? HasCancelButton { get { return this.HasCancelButtonOption; } set { this.HasCancelButtonOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetApplicationResponseApplication {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  LoginUri: ").Append(LoginUri).Append("\n");
            sb.Append("  HomepageUri: ").Append(HomepageUri).Append("\n");
            sb.Append("  HasCancelButton: ").Append(HasCancelButton).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetApplicationResponseApplication" />
    /// </summary>
    public class GetApplicationResponseApplicationJsonConverter : JsonConverter<GetApplicationResponseApplication>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetApplicationResponseApplication" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetApplicationResponseApplication Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<GetApplicationResponseApplication.TypeEnum?> type = default;
            Option<string?> clientId = default;
            Option<string?> clientSecret = default;
            Option<string?> loginUri = default;
            Option<string?> homepageUri = default;
            Option<bool?> hasCancelButton = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GetApplicationResponseApplication.TypeEnum?>(GetApplicationResponseApplication.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "client_id":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "client_secret":
                            clientSecret = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "login_uri":
                            loginUri = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "homepage_uri":
                            homepageUri = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "has_cancel_button":
                            hasCancelButton = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetApplicationResponseApplication.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetApplicationResponseApplication.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetApplicationResponseApplication.");

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class GetApplicationResponseApplication.");

            if (clientSecret.IsSet && clientSecret.Value == null)
                throw new ArgumentNullException(nameof(clientSecret), "Property is not nullable for class GetApplicationResponseApplication.");

            if (loginUri.IsSet && loginUri.Value == null)
                throw new ArgumentNullException(nameof(loginUri), "Property is not nullable for class GetApplicationResponseApplication.");

            if (homepageUri.IsSet && homepageUri.Value == null)
                throw new ArgumentNullException(nameof(homepageUri), "Property is not nullable for class GetApplicationResponseApplication.");

            if (hasCancelButton.IsSet && hasCancelButton.Value == null)
                throw new ArgumentNullException(nameof(hasCancelButton), "Property is not nullable for class GetApplicationResponseApplication.");

            return new GetApplicationResponseApplication(id, name, type, clientId, clientSecret, loginUri, homepageUri, hasCancelButton);
        }

        /// <summary>
        /// Serializes a <see cref="GetApplicationResponseApplication" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getApplicationResponseApplication"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetApplicationResponseApplication getApplicationResponseApplication, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getApplicationResponseApplication, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetApplicationResponseApplication" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getApplicationResponseApplication"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetApplicationResponseApplication getApplicationResponseApplication, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getApplicationResponseApplication.IdOption.IsSet && getApplicationResponseApplication.Id == null)
                throw new ArgumentNullException(nameof(getApplicationResponseApplication.Id), "Property is required for class GetApplicationResponseApplication.");

            if (getApplicationResponseApplication.NameOption.IsSet && getApplicationResponseApplication.Name == null)
                throw new ArgumentNullException(nameof(getApplicationResponseApplication.Name), "Property is required for class GetApplicationResponseApplication.");

            if (getApplicationResponseApplication.ClientIdOption.IsSet && getApplicationResponseApplication.ClientId == null)
                throw new ArgumentNullException(nameof(getApplicationResponseApplication.ClientId), "Property is required for class GetApplicationResponseApplication.");

            if (getApplicationResponseApplication.ClientSecretOption.IsSet && getApplicationResponseApplication.ClientSecret == null)
                throw new ArgumentNullException(nameof(getApplicationResponseApplication.ClientSecret), "Property is required for class GetApplicationResponseApplication.");

            if (getApplicationResponseApplication.LoginUriOption.IsSet && getApplicationResponseApplication.LoginUri == null)
                throw new ArgumentNullException(nameof(getApplicationResponseApplication.LoginUri), "Property is required for class GetApplicationResponseApplication.");

            if (getApplicationResponseApplication.HomepageUriOption.IsSet && getApplicationResponseApplication.HomepageUri == null)
                throw new ArgumentNullException(nameof(getApplicationResponseApplication.HomepageUri), "Property is required for class GetApplicationResponseApplication.");

            if (getApplicationResponseApplication.IdOption.IsSet)
                writer.WriteString("id", getApplicationResponseApplication.Id);

            if (getApplicationResponseApplication.NameOption.IsSet)
                writer.WriteString("name", getApplicationResponseApplication.Name);

            var typeRawValue = GetApplicationResponseApplication.TypeEnumToJsonValue(getApplicationResponseApplication.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (getApplicationResponseApplication.ClientIdOption.IsSet)
                writer.WriteString("client_id", getApplicationResponseApplication.ClientId);

            if (getApplicationResponseApplication.ClientSecretOption.IsSet)
                writer.WriteString("client_secret", getApplicationResponseApplication.ClientSecret);

            if (getApplicationResponseApplication.LoginUriOption.IsSet)
                writer.WriteString("login_uri", getApplicationResponseApplication.LoginUri);

            if (getApplicationResponseApplication.HomepageUriOption.IsSet)
                writer.WriteString("homepage_uri", getApplicationResponseApplication.HomepageUri);

            if (getApplicationResponseApplication.HasCancelButtonOption.IsSet)
                writer.WriteBoolean("has_cancel_button", getApplicationResponseApplication.HasCancelButtonOption.Value!.Value);
        }
    }
}
