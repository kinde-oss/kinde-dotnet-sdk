// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetOrganizationFeatureFlagsResponseFeatureFlagsValue
    /// </summary>
    public partial class GetOrganizationFeatureFlagsResponseFeatureFlagsValue
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrganizationFeatureFlagsResponseFeatureFlagsValue" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public GetOrganizationFeatureFlagsResponseFeatureFlagsValue(Option<TypeEnum?> type = default, Option<string?> value = default)
        {
            TypeOption = type;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Str for value: str
            /// </summary>
            Str = 1,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            Int = 2,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            Bool = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("str"))
                return TypeEnum.Str;

            if (value.Equals("int"))
                return TypeEnum.Int;

            if (value.Equals("bool"))
                return TypeEnum.Bool;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("str"))
                return TypeEnum.Str;

            if (value.Equals("int"))
                return TypeEnum.Int;

            if (value.Equals("bool"))
                return TypeEnum.Bool;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Str)
                return "str";

            if (value == TypeEnum.Int)
                return "int";

            if (value == TypeEnum.Bool)
                return "bool";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(Kinde.Api.Converters.GenericEnumConverter))]

        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetOrganizationFeatureFlagsResponseFeatureFlagsValue {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetOrganizationFeatureFlagsResponseFeatureFlagsValue" />
    /// </summary>
    public class GetOrganizationFeatureFlagsResponseFeatureFlagsValueJsonConverter : JsonConverter<GetOrganizationFeatureFlagsResponseFeatureFlagsValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetOrganizationFeatureFlagsResponseFeatureFlagsValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetOrganizationFeatureFlagsResponseFeatureFlagsValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetOrganizationFeatureFlagsResponseFeatureFlagsValue.TypeEnum?> type = default;
            Option<string?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GetOrganizationFeatureFlagsResponseFeatureFlagsValue.TypeEnum?>(GetOrganizationFeatureFlagsResponseFeatureFlagsValue.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetOrganizationFeatureFlagsResponseFeatureFlagsValue.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class GetOrganizationFeatureFlagsResponseFeatureFlagsValue.");

            return new GetOrganizationFeatureFlagsResponseFeatureFlagsValue(type, value);
        }

        /// <summary>
        /// Serializes a <see cref="GetOrganizationFeatureFlagsResponseFeatureFlagsValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getOrganizationFeatureFlagsResponseFeatureFlagsValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetOrganizationFeatureFlagsResponseFeatureFlagsValue getOrganizationFeatureFlagsResponseFeatureFlagsValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getOrganizationFeatureFlagsResponseFeatureFlagsValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetOrganizationFeatureFlagsResponseFeatureFlagsValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getOrganizationFeatureFlagsResponseFeatureFlagsValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetOrganizationFeatureFlagsResponseFeatureFlagsValue getOrganizationFeatureFlagsResponseFeatureFlagsValue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getOrganizationFeatureFlagsResponseFeatureFlagsValue.ValueOption.IsSet && getOrganizationFeatureFlagsResponseFeatureFlagsValue.Value == null)
                throw new ArgumentNullException(nameof(getOrganizationFeatureFlagsResponseFeatureFlagsValue.Value), "Property is required for class GetOrganizationFeatureFlagsResponseFeatureFlagsValue.");

            var typeRawValue = GetOrganizationFeatureFlagsResponseFeatureFlagsValue.TypeEnumToJsonValue(getOrganizationFeatureFlagsResponseFeatureFlagsValue.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (getOrganizationFeatureFlagsResponseFeatureFlagsValue.ValueOption.IsSet)
                writer.WriteString("value", getOrganizationFeatureFlagsResponseFeatureFlagsValue.Value);
        }
    }
}
