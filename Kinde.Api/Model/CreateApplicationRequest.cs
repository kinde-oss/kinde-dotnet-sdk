// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateApplicationRequest
    /// </summary>
    public partial class CreateApplicationRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApplicationRequest" /> class.
        /// </summary>
        /// <param name="name">The application&#39;s name.</param>
        /// <param name="type">The application&#39;s type. Use &#x60;reg&#x60; for regular server rendered applications, &#x60;spa&#x60; for single-page applications, &#x60;m2m&#x60; for machine-to-machine applications, and &#x60;device&#x60; for devices and IoT.</param>
        /// <param name="orgCode">Scope an M2M application to an org (Plus plan required).</param>
        [JsonConstructor]
        public CreateApplicationRequest(string name, TypeEnum type, Option<string?> orgCode = default)
        {
            Name = name;
            Type = type;
            OrgCodeOption = orgCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The application&#39;s type. Use &#x60;reg&#x60; for regular server rendered applications, &#x60;spa&#x60; for single-page applications, &#x60;m2m&#x60; for machine-to-machine applications, and &#x60;device&#x60; for devices and IoT.
        /// </summary>
        /// <value>The application&#39;s type. Use &#x60;reg&#x60; for regular server rendered applications, &#x60;spa&#x60; for single-page applications, &#x60;m2m&#x60; for machine-to-machine applications, and &#x60;device&#x60; for devices and IoT.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Reg for value: reg
            /// </summary>
            Reg = 1,

            /// <summary>
            /// Enum Spa for value: spa
            /// </summary>
            Spa = 2,

            /// <summary>
            /// Enum M2m for value: m2m
            /// </summary>
            M2m = 3,

            /// <summary>
            /// Enum Device for value: device
            /// </summary>
            Device = 4
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("reg"))
                return TypeEnum.Reg;

            if (value.Equals("spa"))
                return TypeEnum.Spa;

            if (value.Equals("m2m"))
                return TypeEnum.M2m;

            if (value.Equals("device"))
                return TypeEnum.Device;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("reg"))
                return TypeEnum.Reg;

            if (value.Equals("spa"))
                return TypeEnum.Spa;

            if (value.Equals("m2m"))
                return TypeEnum.M2m;

            if (value.Equals("device"))
                return TypeEnum.Device;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Reg)
                return "reg";

            if (value == TypeEnum.Spa)
                return "spa";

            if (value == TypeEnum.M2m)
                return "m2m";

            if (value == TypeEnum.Device)
                return "device";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The application&#39;s type. Use &#x60;reg&#x60; for regular server rendered applications, &#x60;spa&#x60; for single-page applications, &#x60;m2m&#x60; for machine-to-machine applications, and &#x60;device&#x60; for devices and IoT.
        /// </summary>
        /// <value>The application&#39;s type. Use &#x60;reg&#x60; for regular server rendered applications, &#x60;spa&#x60; for single-page applications, &#x60;m2m&#x60; for machine-to-machine applications, and &#x60;device&#x60; for devices and IoT.</value>
        [JsonConverter(typeof(Kinde.Api.Converters.GenericEnumConverter))]

        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The application&#39;s name.
        /// </summary>
        /// <value>The application&#39;s name.</value>
        /* <example>React Native app</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of OrgCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrgCodeOption { get; private set; }

        /// <summary>
        /// Scope an M2M application to an org (Plus plan required).
        /// </summary>
        /// <value>Scope an M2M application to an org (Plus plan required).</value>
        /* <example>org_1234567890abcdef</example> */
        [JsonPropertyName("org_code")]
        public string? OrgCode { get { return this.OrgCodeOption; } set { this.OrgCodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateApplicationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateApplicationRequest" />
    /// </summary>
    public class CreateApplicationRequestJsonConverter : JsonConverter<CreateApplicationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateApplicationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateApplicationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<CreateApplicationRequest.TypeEnum?> type = default;
            Option<string?> orgCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CreateApplicationRequest.TypeEnum?>(CreateApplicationRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "org_code":
                            orgCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateApplicationRequest.", nameof(name));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CreateApplicationRequest.", nameof(type));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateApplicationRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreateApplicationRequest.");

            return new CreateApplicationRequest(name.Value!, type.Value!.Value!, orgCode);
        }

        /// <summary>
        /// Serializes a <see cref="CreateApplicationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createApplicationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateApplicationRequest createApplicationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createApplicationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateApplicationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createApplicationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateApplicationRequest createApplicationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createApplicationRequest.Name == null)
                throw new ArgumentNullException(nameof(createApplicationRequest.Name), "Property is required for class CreateApplicationRequest.");

            writer.WriteString("name", createApplicationRequest.Name);

            var typeRawValue = CreateApplicationRequest.TypeEnumToJsonValue(createApplicationRequest.Type);
            writer.WriteString("type", typeRawValue);
            if (createApplicationRequest.OrgCodeOption.IsSet)
                if (createApplicationRequest.OrgCodeOption.Value != null)
                    writer.WriteString("org_code", createApplicationRequest.OrgCode);
                else
                    writer.WriteNull("org_code");
        }
    }
}
