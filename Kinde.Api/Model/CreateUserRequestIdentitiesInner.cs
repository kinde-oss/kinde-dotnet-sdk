// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// The result of the user creation operation.
    /// </summary>
    public partial class CreateUserRequestIdentitiesInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserRequestIdentitiesInner" /> class.
        /// </summary>
        /// <param name="type">The type of identity to create, e.g. email, username, or phone.</param>
        /// <param name="isVerified">Set whether an email or phone identity is verified or not.</param>
        /// <param name="details">details</param>
        [JsonConstructor]
        public CreateUserRequestIdentitiesInner(Option<TypeEnum?> type = default, Option<bool?> isVerified = default, Option<CreateUserRequestIdentitiesInnerDetails?> details = default)
        {
            TypeOption = type;
            IsVerifiedOption = isVerified;
            DetailsOption = details;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of identity to create, e.g. email, username, or phone.
        /// </summary>
        /// <value>The type of identity to create, e.g. email, username, or phone.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            Email = 1,

            /// <summary>
            /// Enum Phone for value: phone
            /// </summary>
            Phone = 2,

            /// <summary>
            /// Enum Username for value: username
            /// </summary>
            Username = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("email"))
                return TypeEnum.Email;

            if (value.Equals("phone"))
                return TypeEnum.Phone;

            if (value.Equals("username"))
                return TypeEnum.Username;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("email"))
                return TypeEnum.Email;

            if (value.Equals("phone"))
                return TypeEnum.Phone;

            if (value.Equals("username"))
                return TypeEnum.Username;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Email)
                return "email";

            if (value == TypeEnum.Phone)
                return "phone";

            if (value == TypeEnum.Username)
                return "username";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// The type of identity to create, e.g. email, username, or phone.
        /// </summary>
        /// <value>The type of identity to create, e.g. email, username, or phone.</value>
        [JsonConverter(typeof(Kinde.Api.Converters.GenericEnumConverter))]
        [Newtonsoft.Json.JsonConverter(typeof(Kinde.Api.Converters.NewtonsoftGenericEnumConverter))]

        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of IsVerified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsVerifiedOption { get; private set; }

        /// <summary>
        /// Set whether an email or phone identity is verified or not.
        /// </summary>
        /// <value>Set whether an email or phone identity is verified or not.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_verified")]
        public bool? IsVerified { get { return this.IsVerifiedOption; } set { this.IsVerifiedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateUserRequestIdentitiesInnerDetails?> DetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [JsonPropertyName("details")]
        public CreateUserRequestIdentitiesInnerDetails? Details { get { return this.DetailsOption; } set { this.DetailsOption = new Option<CreateUserRequestIdentitiesInnerDetails?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserRequestIdentitiesInner {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateUserRequestIdentitiesInner" />
    /// </summary>
    public class CreateUserRequestIdentitiesInnerJsonConverter : JsonConverter<CreateUserRequestIdentitiesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateUserRequestIdentitiesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateUserRequestIdentitiesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateUserRequestIdentitiesInner.TypeEnum?> type = default;
            Option<bool?> isVerified = default;
            Option<CreateUserRequestIdentitiesInnerDetails?> details = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CreateUserRequestIdentitiesInner.TypeEnum?>(CreateUserRequestIdentitiesInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "is_verified":
                            isVerified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "details":
                            details = new Option<CreateUserRequestIdentitiesInnerDetails?>(JsonSerializer.Deserialize<CreateUserRequestIdentitiesInnerDetails>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreateUserRequestIdentitiesInner.");

            if (isVerified.IsSet && isVerified.Value == null)
                throw new ArgumentNullException(nameof(isVerified), "Property is not nullable for class CreateUserRequestIdentitiesInner.");

            if (details.IsSet && details.Value == null)
                throw new ArgumentNullException(nameof(details), "Property is not nullable for class CreateUserRequestIdentitiesInner.");

            return new CreateUserRequestIdentitiesInner(type, isVerified, details);
        }

        /// <summary>
        /// Serializes a <see cref="CreateUserRequestIdentitiesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createUserRequestIdentitiesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateUserRequestIdentitiesInner createUserRequestIdentitiesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createUserRequestIdentitiesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateUserRequestIdentitiesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createUserRequestIdentitiesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateUserRequestIdentitiesInner createUserRequestIdentitiesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createUserRequestIdentitiesInner.DetailsOption.IsSet && createUserRequestIdentitiesInner.Details == null)
                throw new ArgumentNullException(nameof(createUserRequestIdentitiesInner.Details), "Property is required for class CreateUserRequestIdentitiesInner.");

            var typeRawValue = CreateUserRequestIdentitiesInner.TypeEnumToJsonValue(createUserRequestIdentitiesInner.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (createUserRequestIdentitiesInner.IsVerifiedOption.IsSet)
                writer.WriteBoolean("is_verified", createUserRequestIdentitiesInner.IsVerifiedOption.Value!.Value);

            if (createUserRequestIdentitiesInner.DetailsOption.IsSet)
            {
                writer.WritePropertyName("details");
                JsonSerializer.Serialize(writer, createUserRequestIdentitiesInner.Details, jsonSerializerOptions);
            }
        }
    }
}
