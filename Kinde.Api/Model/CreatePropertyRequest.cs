// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreatePropertyRequest
    /// </summary>
    public partial class CreatePropertyRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePropertyRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="key">The property identifier to use in code.</param>
        /// <param name="type">The property type.</param>
        /// <param name="context">The context that the property applies to.</param>
        /// <param name="isPrivate">Whether the property can be included in id and access tokens.</param>
        /// <param name="categoryId">Which category the property belongs to.</param>
        /// <param name="description">Description of the property purpose.</param>
        [JsonConstructor]
        public CreatePropertyRequest(string name, string key, TypeEnum type, ContextEnum context, bool isPrivate, string categoryId, Option<string?> description = default)
        {
            Name = name;
            Key = key;
            Type = type;
            Context = context;
            IsPrivate = isPrivate;
            CategoryId = categoryId;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The property type.
        /// </summary>
        /// <value>The property type.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SingleLineText for value: single_line_text
            /// </summary>
            SingleLineText = 1,

            /// <summary>
            /// Enum MultiLineText for value: multi_line_text
            /// </summary>
            MultiLineText = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("single_line_text"))
                return TypeEnum.SingleLineText;

            if (value.Equals("multi_line_text"))
                return TypeEnum.MultiLineText;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("single_line_text"))
                return TypeEnum.SingleLineText;

            if (value.Equals("multi_line_text"))
                return TypeEnum.MultiLineText;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.SingleLineText)
                return "single_line_text";

            if (value == TypeEnum.MultiLineText)
                return "multi_line_text";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The property type.
        /// </summary>
        /// <value>The property type.</value>
        [JsonConverter(typeof(Kinde.Api.Converters.GenericEnumConverter))]

        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The context that the property applies to.
        /// </summary>
        /// <value>The context that the property applies to.</value>
        public enum ContextEnum
        {
            /// <summary>
            /// Enum Org for value: org
            /// </summary>
            Org = 1,

            /// <summary>
            /// Enum Usr for value: usr
            /// </summary>
            Usr = 2,

            /// <summary>
            /// Enum App for value: app
            /// </summary>
            App = 3
        }

        /// <summary>
        /// Returns a <see cref="ContextEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ContextEnum ContextEnumFromString(string value)
        {
            if (value.Equals("org"))
                return ContextEnum.Org;

            if (value.Equals("usr"))
                return ContextEnum.Usr;

            if (value.Equals("app"))
                return ContextEnum.App;

            throw new NotImplementedException($"Could not convert value to type ContextEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ContextEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContextEnum? ContextEnumFromStringOrDefault(string value)
        {
            if (value.Equals("org"))
                return ContextEnum.Org;

            if (value.Equals("usr"))
                return ContextEnum.Usr;

            if (value.Equals("app"))
                return ContextEnum.App;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ContextEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ContextEnumToJsonValue(ContextEnum value)
        {
            if (value == ContextEnum.Org)
                return "org";

            if (value == ContextEnum.Usr)
                return "usr";

            if (value == ContextEnum.App)
                return "app";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The context that the property applies to.
        /// </summary>
        /// <value>The context that the property applies to.</value>
        [JsonPropertyName("context")]
        public ContextEnum Context { get; set; }

        /// <summary>
        /// The name of the property.
        /// </summary>
        /// <value>The name of the property.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The property identifier to use in code.
        /// </summary>
        /// <value>The property identifier to use in code.</value>
        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Whether the property can be included in id and access tokens.
        /// </summary>
        /// <value>Whether the property can be included in id and access tokens.</value>
        [JsonPropertyName("is_private")]
        public bool IsPrivate { get; set; }

        /// <summary>
        /// Which category the property belongs to.
        /// </summary>
        /// <value>Which category the property belongs to.</value>
        [JsonPropertyName("category_id")]
        public string CategoryId { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the property purpose.
        /// </summary>
        /// <value>Description of the property purpose.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePropertyRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreatePropertyRequest" />
    /// </summary>
    public class CreatePropertyRequestJsonConverter : JsonConverter<CreatePropertyRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreatePropertyRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreatePropertyRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> key = default;
            Option<CreatePropertyRequest.TypeEnum?> type = default;
            Option<CreatePropertyRequest.ContextEnum?> context = default;
            Option<bool?> isPrivate = default;
            Option<string?> categoryId = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CreatePropertyRequest.TypeEnum?>(CreatePropertyRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "context":
                            string? contextRawValue = utf8JsonReader.GetString();
                            if (contextRawValue != null)
                                context = new Option<CreatePropertyRequest.ContextEnum?>(CreatePropertyRequest.ContextEnumFromStringOrDefault(contextRawValue));
                            break;
                        case "is_private":
                            isPrivate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "category_id":
                            categoryId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreatePropertyRequest.", nameof(name));

            if (!key.IsSet)
                throw new ArgumentException("Property is required for class CreatePropertyRequest.", nameof(key));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CreatePropertyRequest.", nameof(type));

            if (!context.IsSet)
                throw new ArgumentException("Property is required for class CreatePropertyRequest.", nameof(context));

            if (!isPrivate.IsSet)
                throw new ArgumentException("Property is required for class CreatePropertyRequest.", nameof(isPrivate));

            if (!categoryId.IsSet)
                throw new ArgumentException("Property is required for class CreatePropertyRequest.", nameof(categoryId));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreatePropertyRequest.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class CreatePropertyRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreatePropertyRequest.");

            if (context.IsSet && context.Value == null)
                throw new ArgumentNullException(nameof(context), "Property is not nullable for class CreatePropertyRequest.");

            if (isPrivate.IsSet && isPrivate.Value == null)
                throw new ArgumentNullException(nameof(isPrivate), "Property is not nullable for class CreatePropertyRequest.");

            if (categoryId.IsSet && categoryId.Value == null)
                throw new ArgumentNullException(nameof(categoryId), "Property is not nullable for class CreatePropertyRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class CreatePropertyRequest.");

            return new CreatePropertyRequest(name.Value!, key.Value!, type.Value!.Value!, context.Value!.Value!, isPrivate.Value!.Value!, categoryId.Value!, description);
        }

        /// <summary>
        /// Serializes a <see cref="CreatePropertyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPropertyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreatePropertyRequest createPropertyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createPropertyRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreatePropertyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPropertyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreatePropertyRequest createPropertyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createPropertyRequest.Name == null)
                throw new ArgumentNullException(nameof(createPropertyRequest.Name), "Property is required for class CreatePropertyRequest.");

            if (createPropertyRequest.Key == null)
                throw new ArgumentNullException(nameof(createPropertyRequest.Key), "Property is required for class CreatePropertyRequest.");

            if (createPropertyRequest.CategoryId == null)
                throw new ArgumentNullException(nameof(createPropertyRequest.CategoryId), "Property is required for class CreatePropertyRequest.");

            if (createPropertyRequest.DescriptionOption.IsSet && createPropertyRequest.Description == null)
                throw new ArgumentNullException(nameof(createPropertyRequest.Description), "Property is required for class CreatePropertyRequest.");

            writer.WriteString("name", createPropertyRequest.Name);

            writer.WriteString("key", createPropertyRequest.Key);

            var typeRawValue = CreatePropertyRequest.TypeEnumToJsonValue(createPropertyRequest.Type);
            writer.WriteString("type", typeRawValue);
            var contextRawValue = CreatePropertyRequest.ContextEnumToJsonValue(createPropertyRequest.Context);
            writer.WriteString("context", contextRawValue);
            writer.WriteBoolean("is_private", createPropertyRequest.IsPrivate);

            writer.WriteString("category_id", createPropertyRequest.CategoryId);

            if (createPropertyRequest.DescriptionOption.IsSet)
                writer.WriteString("description", createPropertyRequest.Description);
        }
    }
}
